//////////////////////////////////////////////////////////////////////////////////////////
/////// THIS CODE IS AUTOGENERATED. DO NOT CHANGE!!!                             /////////
//////////////////////////////////////////////////////////////////////////////////////////
import { ApiProperty, OmitType } from "@nestjs/swagger";
import { Type } from "class-transformer";
import {
    Validate,
    IsBoolean,
    ValidationArguments,
    ValidatorConstraint,
    ValidatorConstraintInterface,
    IsDefined,
    IsNotEmptyObject,
    IsObject,
    ValidateNested,
} from "class-validator";

///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// CUSTOM VALIDATORS ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Validator constraint if the given value is a number or 0x-prefixed hexadecimal string.
 */
@ValidatorConstraint({ name: "unsigned-int", async: false })
class IsUnsignedIntLike implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a string of decimal unsigned number or 0x-prefixed hexadecimal string.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && (/^0x[0-9a-fA-F]+$/i.test(text) || /^[0-9]+$/i.test(text));
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not a decimal number in string or 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is a number or 0x-prefixed hexadecimal string.
 */
@ValidatorConstraint({ name: "signed-int", async: false })
class IsSignedIntLike implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a number or 0x-prefixed hexadecimal string.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && (/^-?0x[0-9a-fA-F]+$/i.test(text) || /^-?[0-9]+$/i.test(text));
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not a signed decimal integer in string or signed 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is a 0x-prefixed hexadecimal string representing 32 bytes.
 */
@ValidatorConstraint({ name: "hash-32", async: false })
class IsHash32 implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a 0x-prefixed hexadecimal string representing 32 bytes.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]{64}$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string representing 32 bytes";
    }
}

/**
 * Validator constraint if the given value is a 0x-prefixed hexadecimal string
 */
@ValidatorConstraint({ name: "hash-0x", async: false })
class Is0xHex implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a 0x-prefixed hexadecimal string
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]+$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is an EVM address, hence 0x-prefixed hexadecimal string representing 20 bytes.
 */
@ValidatorConstraint({ name: "evm-address", async: false })
class IsEVMAddress implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is an EVM address, hence 0x-prefixed hexadecimal string representing 20 bytes.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]{40}$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string representing 20 bytes (EVM address)";
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// DTOs /////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Attestation status
 */
export enum AttestationResponseStatus {
    /**
     * Attestation request is valid.
     */
    VALID = "VALID",
    /**
     * Attestation request is invalid.
     */
    INVALID = "INVALID",
    /**
     * Attestation request cannot be confirmed neither rejected by the verifier at the moment.
     */
    INDETERMINATE = "INDETERMINATE",
}

/**
 * Attestation response for specific attestation type (flattened)
 */
export class AttestationResponseDTO_MatchResult_Response {
    constructor(params: Required<AttestationResponseDTO_MatchResult_Response>) {
        Object.assign(this, params);
    }

    status: AttestationResponseStatus;

    response?: MatchResult_Response;
}

export class MatchResult_ResponseBody {
    constructor(params: Required<MatchResult_ResponseBody>) {
        Object.assign(this, params);
    }

    /**
     * Unix timestamp of the exact match beginning
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `Unix timestamp of the exact match beginning`, example: "1721926800" })
    timestamp: string;

    /**
     * Possible return values are 0 = no data, 1 = team 1 won, 2 = team 2 won, 3 = draw
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `Possible return values are 0 = no data, 1 = team 1 won, 2 = team 2 won, 3 = draw`, example: "1" })
    result: string;
}
export class MatchResult_RequestBody {
    constructor(params: Required<MatchResult_RequestBody>) {
        Object.assign(this, params);
    }

    /**
     * date of a match (unix timestamp without hour - rounded down to day)
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `date of a match (unix timestamp without hour - rounded down to day)`, example: "1721952000" })
    date: string;

    /**
     * id of a sport from 0 - Basketball, 1 - Basketball3x3, 2 - Badminton, 3 - BeachVolley, 4 - FieldHockey, 5 - Football, 6 - Handball, 7 - TableTennis, 8 - Tennis, 9 - Volleyball, 10 - WaterPolo
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({
        description: `id of a sport from 0 - Basketball, 1 - Basketball3x3, 2 - Badminton, 3 - BeachVolley, 4 - FieldHockey, 5 - Football, 6 - Handball, 7 - TableTennis, 8 - Tennis, 9 - Volleyball, 10 - WaterPolo`,
        example: "0",
    })
    sport: string;

    /**
     * 0 - male, 1 - female
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `0 - male, 1 - female`, example: "0" })
    gender: string;

    /**
     * teams playing the game, divided with comma (example: England,Slovenia)
     */
    @ApiProperty({ description: `teams playing the game, divided with comma (example: England;Slovenia)`, example: "England,Slovenia" })
    teams: string;
}
export class MatchResult_Request {
    constructor(params: Required<MatchResult_Request>) {
        Object.assign(this, params);
    }

    /**
     * ID of the attestation type.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `ID of the attestation type.`, example: "0x4d61746368526573756c74000000000000000000000000000000000000000000" })
    attestationType: string;

    /**
     * ID of the data source.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `ID of the data source.`, example: "0x4254430000000000000000000000000000000000000000000000000000000000" })
    sourceId: string;

    /**
     * `MessageIntegrityCode` that is derived from the expected response.
     */
    @Validate(IsHash32)
    @ApiProperty({
        description: `'MessageIntegrityCode' that is derived from the expected response.`,
        example: "0x0000000000000000000000000000000000000000000000000000000000000000",
    })
    messageIntegrityCode: string;

    /**
     * Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.
     */
    @ValidateNested()
    @Type(() => MatchResult_RequestBody)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({ description: `Data defining the request. Type (struct) and interpretation is determined by the 'attestationType'.` })
    requestBody: MatchResult_RequestBody;
}
export class MatchResult_Response {
    constructor(params: Required<MatchResult_Response>) {
        Object.assign(this, params);
    }

    /**
     * Extracted from the request.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Extracted from the request.`, example: "0x4d61746368526573756c74000000000000000000000000000000000000000000" })
    attestationType: string;

    /**
     * Extracted from the request.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Extracted from the request.`, example: "0x4254430000000000000000000000000000000000000000000000000000000000" })
    sourceId: string;

    /**
     * The ID of the State Connector round in which the request was considered.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The ID of the State Connector round in which the request was considered.`, example: "123" })
    votingRound: string;

    /**
     * The lowest timestamp used to generate the response.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The lowest timestamp used to generate the response.`, example: "123" })
    lowestUsedTimestamp: string;

    /**
     * Extracted from the request.
     */
    @ValidateNested()
    @Type(() => MatchResult_RequestBody)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({ description: `Extracted from the request.` })
    requestBody: MatchResult_RequestBody;

    /**
     * Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.
     */
    @ValidateNested()
    @Type(() => MatchResult_ResponseBody)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({
        description: `Data defining the response. The verification rules for the construction of the response body and the type are defined per specific 'attestationType'.`,
    })
    responseBody: MatchResult_ResponseBody;
}
export class MatchResult_Proof {
    constructor(params: Required<MatchResult_Proof>) {
        Object.assign(this, params);
    }

    /**
     * Merkle proof corresponding to the attestation response.
     */
    @Validate(IsHash32, { each: true })
    @ApiProperty({
        description: `Merkle proof corresponding to the attestation response.`,
        example: ["0x0000000000000000000000000000000000000000000000000000000000000000"],
    })
    merkleProof: string[];

    /**
     * Attestation response.
     */
    @ValidateNested()
    @Type(() => MatchResult_Response)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({ description: `Attestation response.` })
    data: MatchResult_Response;
}

export class MatchResult_RequestNoMic extends OmitType<MatchResult_Request, "messageIntegrityCode">(MatchResult_Request, ["messageIntegrityCode"] as const) {}
